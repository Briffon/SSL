{
  "name": "node-vagrant",
  "version": "1.4.0",
  "description": "Node js wrapper for vagrant CLI - command line tool.",
  "main": "index.js",
  "keywords": [
    "vagrant"
  ],
  "scripts": {
    "example": "cd example && node example.js",
    "test": "node ./node_modules/mocha/bin/mocha test",
    "test-all": "export RUN_INTEGRATION_TESTS=1 && node ./node_modules/mocha/bin/mocha test",
    "lint": "eslint src/ test/ index.js"
  },
  "author": {
    "name": "Edin Mujagic"
  },
  "contributors": [
    {
      "name": "Maximilian Klein",
      "url": "https://github.com/LittleHelicase"
    },
    {
      "name": "Jacob Payne",
      "url": "https://github.com/Latrasis"
    },
    {
      "name": "Friedemann Stoffregen",
      "url": "https://github.com/Donderda"
    },
    {
      "name": "Leonardo Nahra",
      "url": "https://github.com/lanahra"
    },
    {
      "name": "Tyler Stiene",
      "url": "https://github.com/Stieneee"
    }
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/edin-m/node-vagrant.git"
  },
  "bugs": {
    "url": "https://github.com/edin-m/node-vagrant/issues"
  },
  "homepage": "https://github.com/edin-m/node-vagrant",
  "license": "ISC",
  "dependencies": {
    "lodash": "4.17.15"
  },
  "devDependencies": {
    "chai": "2.1.0",
    "mocha": "5.2.0",
    "sinon": "3.2.0",
    "rewire": "4.0.1"
  },
  "readme": "# node-vagrant\nNode js wrapper for vagrant CLI - command line tool.\n\nThis is light wrapper around vagrant CLI.\nIt uses spawn process, and every command requiring user input\nsuch as init and destroy is created with switch --force or -f.\n\n[![npm version](https://badge.fury.io/js/node-vagrant.svg)](https://badge.fury.io/js/node-vagrant)\n[![Build Status](https://travis-ci.org/edin-m/node-vagrant.svg?branch=master)](https://travis-ci.org/edin-m/node-vagrant)\n\nInstallation\n===\n\n```\n$ npm install node-vagrant --save\n```\n\nUsage\n===\n\nAll callbacks are node style:\n```js\nfunction(err, out)\n```\nwhere err is stderr if exit code != 0 and out is stdout if exit code == 0\n___\nOther commands\n```js\n// import vagrant\nvar vagrant = require('node-vagrant');\n\n// view version\nvagrant.version(function(err, out) {});\n// or --version ; out = { status: '2.0.3', major: 2, minor: 0, patch: 3 }\nvagrant.versionStatus(function(err, out) {});\n\n// view global status\n// you can specify '--prune' as additional argument. By default global-status is based on a cache,\n// prune removes invalid entries from the list.\n// Note that this is much more time consuming than simply listing the entries.\nvagrant.globalStatus(function(err, out) {});\nvagrant.globalStatus('--prune', function(err, out) {});\n\n// vagrant machine\n\n// create machine - does not run command or init machine\n// you can specify directory where Vagrantfile will be located\n// and machine instanced\nvar machine = vagrant.create({ cwd: <String>, env: <Object> }) // cwd and env default to process' values\n\n// init machine\n// you can specify additional arguments by using array (applicable to other functions)\nmachine.init('ubuntu/trusty64', function(err, out) {});\nmachine.init(['ubuntu/trusty64'], function(err, out) {});\n// -f is set by default\nmachine.init(['ubuntu/trusty64', '-f'], function(err, out) {});\n\n// up\nmachine.up(function(err, out) {})\n\n// status\nmachine.status(function(err, out) {});\n\n// get ssh config - useful to retrieve private and connect to machine with ssh2\n// out is an array of objects [{}] with properties: port, hostname, user, private_key\nmachine.sshConfig(function(err, out) {});\n\n// provision\nmachine.provision(function(err, out) {});\n\n// suspend\nmachine.suspend(function(err, out) {});\n\n// resume\nmachine.resume(function(err, out) {});\n\n// reload\nmachine.reload(function(err, out) {});\n\n// halt\nmachine.halt(function(err, out) {});\n\n// destroy\n// uses -f by default\nmachine.destroy(function(err, out) {});\n\n// snapshots\n// push, pop, save, delete, restore, list and a snapshot() function.\n// example:\nmachine.snapshots().push(cb);\n\n// box repackage\n// must be specific to a vagrant environment hence location in machine\nmachine.boxRepackage(name, provider, version, function(err, out) {})\n\n// plugins\n// expunge, install, uninstall, repair, update, list and a plugin() function.\n// example:\nmachine.plugin().expunge(args, cb);\n\n// DEPRECATED! For backward compatibility only\nmachine.pluginUpdate(function(err, out) {});\nmachine.pluginRepair(function(err, out) {});\n\n// boxes\n\n// box add\n// uses -f by default\n// depending on type of box provided (name,address,file,json) missing information may be prompted.\n// please ensure that your add metheod is specific.\nvagrant.boxAdd(box, args, function(err, out) {})\n    .on('progress', function(out) {});\n\n// box list\n// out is an array of objects [{}] with properties: name, provider, version\nvagrant.boxList(args, function(err, out) {});\n\n// box outdated\n// --global is used by default\n// out is an array of objects [{}] with properties: name, status, currentVersion, latestVersion\n// status can be 'up to date' 'out of date' 'unknown'\n// if status is unknown currentVersion and latestVersion will be null\nvagrant.boxOutdated(args, function(err, out) {});\n\n// box prune\n// uses -f by defaultprune\nvagrant.boxPrune(args, function(err, out) {});\n\n// box remove\n// uses -f by default\nvagrant.boxRemove(name, args, function(err, out) {});\n\n// box repackage\n// avalible in machine\n\n// box update\n// uses the --box and --provider flags by default\n// provider can be null and in that case no --provider arg is added\nvagrant.boxUpdate(box, provider, function(err, out) {});\n    .on('progress', function(out) {});\n\n\n// args\n// should be array of args or a string for single flag see --prune abov\n// ie\nvagrant.boxAdd('ubuntu/trusty64', ['--clean', '--provider', 'virtualbox'], function(err, out) {})\n//or simply\nvagrant.boxAdd('ubuntu/trusty64', '--clean', function(err, out) {})\n```\n\nEvents\n===\n```js\n.on('up-progress', function(out) {}); // receive stdout progress from up of vagrant\n\n.on('progress', function(out) {}); // receive stdout box download progress\n```\n\nReceive any stdout/stderr output from a child subprocess. These work only on a Machine instance:\n\n```\nmachine.on('stdout', function(data) {}); // data is a Buffer\nmachine.on('stderr', function(data) {}); // data is a Buffer\n```\n\nExample\n===\n\nExample script of a usage is in example/example.js\n\n```\n$ npm run example\n```\n\nFlags & env vars\n===\n\nDebug the commands sent to vagrant:\n```js\n$ NODE_DEBUG=1 node example.js\nnode-vagrant command: [ 'global-status' ]\nnode-vagrant command: [ 'version' ]\n```\n\nDisable the debug:\n```js\n$ NODE_DEBUG=1 NODE_VAGRANT_DISABLE_DEBUG=1 node example.js\n```\n\nCustom vagrant location:\n```js\n$ VAGRANT_DIR=/custom/path node example.js\n```\n\nPromises\n===\n\n```js\nvar vagrant = require('../index');\nvagrant.promisify();\n\nvagrant.init('ubuntu/trusty64').then(successCb, errorCb);\n```\n\nTODO\n===\n- [ ] multi-machine\n- [ ] more detail vagrant file settings\n    - [ ] firewall\n    - [ ] networking\n- [x] boxing\n- [x] provisoning\n- [x] providers\n- [x] (native) promises (if available)\n- [ ] use ES6 (after which will become version 2.x.x)\n",
  "readmeFilename": "README.md",
  "_id": "node-vagrant@1.4.0",
  "dist": {
    "shasum": "0ad14203d3503fe5796c0f000b7b0c0833e4ecb6"
  },
  "_from": "node-vagrant@",
  "_resolved": "https://registry.npmjs.org/node-vagrant/-/node-vagrant-1.4.0.tgz"
}
